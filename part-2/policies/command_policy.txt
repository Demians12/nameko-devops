--- INGRESS CONTROLLER ---
Download policy for controller:
curl -o iam_policy_latest.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json

Create IAM Policy using policy downloaded 
aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy_latest.json

get worker node iam role 
kubectl -n kube-system describe configmap aws-auth

Create service account for controller:
eksctl create iamserviceaccount \
  --cluster=lab1-eks \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --attach-policy-arn=arn:aws:iam::242364459859:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --approve

- Add the eks-charts repository.
helm repo add eks https://aws.github.io/eks-charts
helm repo update

list the vpc id 
aws ec2 describe-vpcs

- Install the controller:
helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=lab1-eks \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller \
  --set region=us-east-1 \
  --set vpcId=vpc-0557114f896436a3d \
  --set image.repository=602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-load-balancer-controller

- Verify that the controller is installed.
kubectl -n kube-system get deployment 
kubectl -n kube-system get deployment aws-load-balancer-controller
kubectl -n kube-system describe deployment aws-load-balancer-controller

- Verify AWS Load Balancer Controller Webhook service created
kubectl -n kube-system get svc 
kubectl -n kube-system get svc aws-load-balancer-webhook-service
kubectl -n kube-system describe svc aws-load-balancer-webhook-service

- Verify Labels in Service and Selector Labels in Deployment
kubectl -n kube-system get svc aws-load-balancer-webhook-service -o yaml
kubectl -n kube-system get deployment aws-load-balancer-controller -o yaml
Observation:
1. Verify "spec.selector" label in "aws-load-balancer-webhook-service"
2. Compare it with "aws-load-balancer-controller" Deployment "spec.selector.matchLabels"
3. Both values should be same which traffic coming to "aws-load-balancer-webhook-service" on port 443 will be sent to port 9443 on "aws-load-balancer-controller" deployment related pods.

- Creating ingressClass (go to manifests/ingress/):
kubectl apply -f ingressClass.yaml

- Verify IngressClass Resource
kubectl get ingressclass

- Describe IngressClass Resource
kubectl describe ingressclass aws-ingress-class

--- EBS VOLUME ---

1. create policy for ebs: 
aws iam create-policy --policy-name amazon_ebs_csi_driver --policy-document file://amazon_ebs_csi_driver.json

2. Get Worker node IAM Role ARN
kubectl -n kube-system describe configmap aws-auth

3. attach policy to a role
aws iam attach-role-policy --role-name eksctl-lab1-eks-nodegroup-lab1-ek-NodeInstanceRole-JFJFV2Y81725 --policy-arn arn:aws:iam::242364459859:policy/amazon_ebs_csi_driver

4. Deploy EBS CSI Driver
kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"

5. Verify ebs-csi pods running
kubectl get pods -n kube-system

- Storing sensitive information
Rabbit 
kubectl create secret generic rabbitmq --from-literal=RABBIT_PASSWORD=RDB66LpD9uhAYbh0
---
REDIS:
kubectl create secret generic cache-redis --from-literal=REDIS_PASSWORD=REthFKo2Dt
---
POSTGRESQL:
kubectl create secret generic db-postgresql --from-literal=DB_PASSWORD=HQgBuQVfif 


Rabbitmq:
helm --namespace nameko install rabbitmq bitnami/rabbitmq
NAME: rabbitmq
LAST DEPLOYED: Thu May 25 18:45:49 2023
NAMESPACE: nameko
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: rabbitmq
CHART VERSION: 11.15.3
APP VERSION: 3.11.16** Please be patient while the chart is being deployed **

Credentials:
    echo "Username      : user"
    echo "Password      : $(kubectl get secret --namespace nameko rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 -d)"
    echo "ErLang Cookie : $(kubectl get secret --namespace nameko rabbitmq -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 -d)"

Note that the credentials are saved in persistent volume claims and will not be changed upon upgrade or reinstallation unless the persistent volume claim has been deleted. If this is not the first installation of this chart, the credentials may not be valid.
This is applicable when no passwords are set and therefore the random password is autogenerated. In case of using a fixed password, you should specify it when upgrading.
More information about the credentials may be found at https://docs.bitnami.com/general/how-to/troubleshoot-helm-chart-issues/#credential-errors-while-upgrading-chart-releases.

RabbitMQ can be accessed within the cluster on port 5672 at rabbitmq.nameko.svc.cluster.local

To access for outside the cluster, perform the following steps:

To Access the RabbitMQ AMQP port:

    echo "URL : amqp://127.0.0.1:5672/"
    kubectl port-forward --namespace nameko svc/rabbitmq 5672:5672

To Access the RabbitMQ Management interface:

    echo "URL : http://127.0.0.1:15672/"
    kubectl port-forward --namespace nameko svc/rabbitmq 15672:15672


postgres:
helm install db  bitnami/postgresql --set postgresqlDatabase=orders -n nameko
NAME: db
LAST DEPLOYED: Thu May 25 19:37:00 2023
NAMESPACE: nameko
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: postgresql
CHART VERSION: 12.5.5
APP VERSION: 15.3.0

** Please be patient while the chart is being deployed **

PostgreSQL can be accessed via port 5432 on the following DNS names from within your cluster:

    db-postgresql.nameko.svc.cluster.local - Read/Write connection

To get the password for "postgres" run:

    export POSTGRES_PASSWORD=$(kubectl get secret --namespace nameko db-postgresql -o jsonpath="{.data.postgres-password}" | base64 -d)

To connect to your database run the following command:

    kubectl run db-postgresql-client --rm --tty -i --restart='Never' --namespace nameko --image docker.io/bitnami/postgresql:15.3.0-debian-11-r4 --env="PGPASSWORD=$POSTGRES_PASSWORD" \
      --command -- psql --host db-postgresql -U postgres -d postgres -p 5432

    > NOTE: If you access the container using bash, make sure that you execute "/opt/bitnami/scripts/postgresql/entrypoint.sh /bin/bash" in order to avoid the error "psql: local user with ID 1001} does not exist"

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace nameko svc/db-postgresql 5432:5432 &
    PGPASSWORD="$POSTGRES_PASSWORD" psql --host 127.0.0.1 -U postgres -d postgres -p 5432

WARNING: The configured password will be ignored on new installation in case when previous Posgresql release was deleted through the helm command. In that case, old PVC will have an old password, and setting it through helm won't take effect. Deleting persistent volumes (PVs) will solve the issue.

helm  install cache bitnami/redis -n nameko
NAME: cache
LAST DEPLOYED: Thu May 25 19:40:12 2023
NAMESPACE: nameko
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: redis
CHART VERSION: 17.11.3
APP VERSION: 7.0.11

** Please be patient while the chart is being deployed **

Redis&reg; can be accessed on the following DNS names from within your cluster:

    cache-redis-master.nameko.svc.cluster.local for read/write operations (port 6379)
    cache-redis-replicas.nameko.svc.cluster.local for read-only operations (port 6379)



To get your password run:

    export REDIS_PASSWORD=$(kubectl get secret --namespace nameko cache-redis -o jsonpath="{.data.redis-password}" | base64 -d)

To connect to your Redis&reg; server:

1. Run a Redis&reg; pod that you can use as a client:

   kubectl run --namespace nameko redis-client --restart='Never'  --env REDIS_PASSWORD=$REDIS_PASSWORD  --image docker.io/bitnami/redis:7.0.11-debian-11-r12 --command -- sleep infinity

   Use the following command to attach to the pod:

   kubectl exec --tty -i redis-client \
   --namespace nameko -- bash

2. Connect using the Redis&reg; CLI:
   REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h cache-redis-master
   REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h cache-redis-replicas

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace nameko svc/cache-redis-master 6379:6379 &
    REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h 127.0.0.1 -p 6379